{{ define "combo-calc" }}
    <html lang="en">
    <head>
        <meta name="viewport" content="width=device-width">
        <meta property="og:site_name" content="PSOStats"/>
        <meta property="og:title" content="Combo Calculator - {{ if .Opm }}OPM{{ else }}Multi{{ end }}"/>
        <title>Combo Calculator - PSOStats</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css" integrity="sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l" crossorigin="anonymous">
        <script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
        <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/vue@2"></script>
        <script src="https://unpkg.com/vue-multiselect@2.1.0"></script>
        <link rel="stylesheet" href="https://unpkg.com/vue-multiselect@2.1.0/dist/vue-multiselect.min.css">
        <link href="/static/main2.css" rel="stylesheet" type="text/css">
        <script type="text/javascript" src="/static/combo_calc3.js"></script>
    </head>
    <style>
        :root {
            --colors-native: #A5FFAAFF;
            --colors-abeast: #f5ff99;
            --colors-machine: #ff958b;
            --colors-dark: #e1a9ff;
        }
        .psostats-content {
            background-color: #444;
            padding: 8px;
        }
        .form-select {
            color: #ddd;
            background-color: #333;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23ffffff' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e")
        }
        .btn-group {
            width: 100%;
            background-color: #333;
            color: #ddd;
        }

        .form-check-label {
            color: #ccc;
        }
        .sortable {
            cursor: pointer;
        }
        .form-control {
            color: #ddd;
            background-color: #333;
            border-top-color: #aaa;
            border-bottom-color: #aaa;
            border-left-color: #aaa;
            border-right-color: #aaa;
        }
        .form-control:focus {
            background-color: #444;
            color: #ddd;
        }
        .input-group-text {
            color: #ddd;
            background-color: #282828;
            border-color: #aaa;
        }
        .table-dark {
            background-color: #333;
            margin-bottom: 0;
        }
        .table-dark td, .table-dark th, .table-dark thead th {
            border-width: 1px;
            border-color: #5A5A5A;
        }
        .custom-select {
            border-color: #aaa;
        }
        .multiselect__tags, .multiselect__input, .multiselect__input::placeholder, .multiselect__single {
            background: #333;
            color: #ddd;
        }
        .multiselect__tags {
            border-color: #aaa;
            border-width: 1px;
        }
        .multiselect__tag, .multiselect__tag-icon {
            background-color: #aaa;
            color: #000;
        }
        .multiselect__tag-icon:after {
            color: #000;
        }
        .multiselect__tag-icon:focus, .multiselect__tag-icon:hover {
            background-color: #666;
        }
        .form-control:disabled {
            background-color: #666666;
        }

        .monster-title-Native {
            color: var(--colors-native);
        }
        .monster-title-ABeast {
            color: var(--colors-abeast);
        }
        .monster-title-Machine {
            color: var(--colors-machine);
        }
        .monster-title-Dark {
            color: var(--colors-dark);
        }

        .btn {
            border-color: #aaa;
            border-width: 1px;
            background-color: #333;
        }

        .native-btn {
            color: var(--colors-native);
        }
        .abeast-btn {
            color: var(--colors-abeast);
        }
        .machine-btn {
            color: var(--colors-machine);
        }
        .dark-btn {
            color: var(--colors-dark);
        }

        .clear-btn {
            color: #aaa;
        }
    </style>
    <body>

    <div class="container">
        {{ template "navbar" }}
        <div class="row">
            <div class="col">
                <h1>Combo Calculator {{ if .Opm }}OPM{{ else }}Multiplayer{{ end }}</h1>
                {{ if .Opm }}<a href="/combo-calculator">Switch to Multiplayer</a>{{ else }}<a href="/combo-calculator/opm">Switch to OPM</a>{{ end }}
            </div>
        </div>
        <div class="row psostats-content">
            <div class="col-7 col-sm-5 col-md-4 col-lg-3 mb-1">
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="commanderBlade">
                    <label class="form-check-label" for="commanderBlade">Commander Blade</label>
                </div>
            </div>
            <div class="col-5 col-sm-7 col-md-8 col-lg-9 mb-1">
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="smartlinkInput" checked>
                    <label class="form-check-label" for="smartlinkInput">Smartlink</label>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-lg-3 mb-1">
                <select class="form-control" id="class-select" aria-label="Class Select">
                    <optgroup label="Hunter">
                        <option value="HUmar">HUmar</option>
                        <option value="HUnewearl">HUnewearl</option>
                        <option value="HUcast" selected>HUcast</option>
                        <option value="HUcaseal">HUcaseal</option>
                    </optgroup>
                    <optgroup label="Ranger">
                        <option value="RAmar">RAmar</option>
                        <option value="RAmarl">RAmarl</option>
                        <option value="RAcast">RAcast</option>
                        <option value="RAcaseal">RAcaseal</option>
                    </optgroup>
                    <optgroup label="Force">
                        <option value="FOmar">FOmar</option>
                        <option value="FOmarl">FOmarl</option>
                        <option value="FOnewm">FOnewm</option>
                        <option value="FOnewearl">FOnewearl</option>
                    </optgroup>
                </select>
            </div>
            <div class="col-12 col-sm-6 col-lg-3 mb-1">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">Frame</div>
                    </div>

                    <select id="frame-select" class="form-control" aria-label="Frame Select">
                        {{ range $frame := .Frames }}
                        <option value="{{.Name}}">{{.Name}}</option>
                        {{ end }}
                    </select>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-lg-3 mb-1">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">Barrier</div>
                    </div>
                    <select id="barrier-select" class="form-control" aria-label="Barrier Select">
                        <option value="None">None</option>
                        <option value="Red Ring" selected>Red Ring</option>
                        <option value="Ranger Wall">Ranger Wall</option>
                        <option value="Kasami Bracer">Kasami Bracer</option>
                        <option value="Combat Gear">Combat Gear</option>
                        <option value="Safety Heart">Safety Heart</option>
                        <option value="S-Parts ver2.01">S-Parts ver2.01</option>
                        <option value="Black Ring (1)">Black Ring (1)</option>
                        <option value="Black Ring (2)">Black Ring (2)</option>
                        <option value="Black Ring (3)">Black Ring (3)</option>
                    </select>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-lg-3 mb-1">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">Units</div>
                    </div>
                    <select id="unit-select" class="form-control" aria-label="Unit Select">
                        <option value="NONE" selected>None</option>
                        <option value="POSS1">Proof of Sword-Saint</option>
                        <option value="POSS2">POSS x2</option>
                        <option value="POSS3">POSS x3</option>
                        <option value="POSS4">POSS x4</option>
                    </select>
                </div>
            </div>
            <div class="col-6 col-md-3 mb-1">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">ATP</div>
                    </div>
                    <input type="text" class="form-control" id="classMinAtpInput" value="1634" >
                    <input type="text" class="form-control" id="classMaxAtpInput" value="1639" >
                </div>
            </div>
            <div class="col-6 col-md-3 mb-1">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">ATA</div>
                    </div>
                    <input type="text" class="form-control" id="ataInput" value="191">
                </div>
            </div>
            <div class="col-6 col-md-3 mb-1">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">Shifta</div>
                    </div>
                    <input type="text" class="form-control" id="shiftaInput" value="0">
                </div>
            </div>

            <div class="col-6 col-md-3 mb-1">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">Zalure</div>
                    </div>
                    <input type="text" class="form-control" id="zalureInput" value="0">
                </div>
            </div>

        </div>
        <div class="row psostats-content">
            <div class="col-12">
                <h3>Weapon</h3>
            </div>

            <div class="col-8 col-lg-4 col-xl-3 mb-1">
                <div id="app">
                <multiselect
                        v-model="value"
                        :options="weapons"
                        track-by="name"
                        label="display"
                        :allow-empty="false"
                        @select="weaponSelected"
                        selected-label=""
                        select-label=""
                        deselect-label=""
                        show-label="false"
                ></multiselect>
                </div>
            </div>
            <div class="col-4 col-lg-3 col-xl-2 mb-1">
                <select id="special-select" class="form-control special-select">
                    <option value="None">None</option>
                    <option value="Charge">Charge</option>
                    <option value="Berserk">Berserk</option>
                    <option value="Spirit">Spirit</option>
                    <option value="Arrest">Arrest</option>
                    <option value="Gush">Gush</option>
                    <option value="Devil's">Devil's</option>
                    <option value="Demon's">Demon&#39;s</option>
                    <option value="Lavis Cannon">Lavis Cannon</option>
                    <option value="Lavis Blade">Lavis Blade</option>
                    <option value="Raikiri">Raikiri</option>
                    <option value="Orotiagito">Orotiagito</option>
                    <option value="TJS">TJS</option>
                    <option value="Dark Flow">Dark Flow</option>
                    <option value="Frozen Shooter">Frozen Shooter</option>
                    <option value="Vjaya">Vjaya</option>
                    <option value="Mille Marteaux">Mille Marteaux</option>
                </select>
            </div>
            <div class="col-6 col-sm-3 col-lg-2 mb-1">
                <div class="input-group">
                    <input type="text" class="form-control" id="sphereInput" value="0">
                    <div class="input-group-append">
                        <div class="input-group-text">%</div>
                    </div>
                </div>
            </div>
            <div class="col-6 col-sm-3 col-lg-2 mb-1">
                <div class="input-group">
                    <input type="text" class="form-control" id="hitInput" value="0">
                    <div class="input-group-append">
                        <div class="input-group-text">Hit</div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-lg-3 mb-1">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">ATP</div>
                    </div>
                    <input type="text" class="form-control" id="minAtpInput" value="0">
                    <input type="text" class="form-control" id="maxAtpInput" value="0">
                </div>
            </div>

        </div>

        <div class="row psostats-content">
            <div class="col-12">
                <h3>Combo</h3>
            </div>
            <div class="col-12 mb-1">
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="ataGlitch">
                    <label class="form-check-label" for="ataGlitch">Accuracy (SN) Glitch</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="autoCombo">
                    <label class="form-check-label" for="autoCombo">Auto Combo</label>
                </div>
            </div>

            <div class="col-12 col-md-4 mb-1">
                <div class="input-group" id="attack1InputGroup">
                    <select id="attack1" class="form-control">
                        <option value="NORMAL">Normal</option>
                        <option value="HEAVY">Heavy</option>
                        <option value="SPECIAL">Special</option>
                        <option value="NONE">None</option>
                    </select>
                    <select id="hits1" class="form-control">
                        <option value="1">1 Hit</option>
                        <option value="2">2 Hits</option>
                        <option value="3">3 Hits</option>
                        <option value="4">4 Hits</option>
                        <option value="5">5 Hits</option>
                        <option value="6">6 Hit</option>
                        <option value="7">7 Hits</option>
                        <option value="8">8 Hits</option>
                        <option value="9">9 Hits</option>
                        <option value="10">10 Hits</option>
                    </select>
                </div>
            </div>
            <div class="col-12 col-md-4 mb-1">
                <div class="input-group" id="attack2InputGroup">
                    <select id="attack2" class="form-control" id="combo2Attack">
                        <option value="NORMAL">Normal</option>
                        <option value="HEAVY">Heavy</option>
                        <option value="SPECIAL">Special</option>
                        <option value="NONE">None</option>
                    </select>
                    <select id="hits2" class="form-control">
                        <option value="1">1 Hit</option>
                        <option value="2">2 Hits</option>
                        <option value="3">3 Hits</option>
                        <option value="4">4 Hits</option>
                        <option value="5">5 Hits</option>
                        <option value="6">6 Hit</option>
                        <option value="7">7 Hits</option>
                        <option value="8">8 Hits</option>
                        <option value="9">9 Hits</option>
                        <option value="10">10 Hits</option>
                    </select>
                </div>
            </div>
            <div class="col-12 col-md-4 mb-1">
                <div class="input-group"  id="attack3InputGroup">
                    <select id="attack3" class="form-control">
                        <option value="NORMAL">Normal</option>
                        <option value="HEAVY">Heavy</option>
                        <option value="SPECIAL">Special</option>
                        <option value="NONE">None</option>
                    </select>
                    <select id="hits3" class="form-control">
                        <option value="1">1 Hit</option>
                        <option value="2">2 Hits</option>
                        <option value="3">3 Hits</option>
                        <option value="4">4 Hits</option>
                        <option value="5">5 Hits</option>
                        <option value="6">6 Hit</option>
                        <option value="7">7 Hits</option>
                        <option value="8">8 Hits</option>
                        <option value="9">9 Hits</option>
                        <option value="10">10 Hits</option>
                    </select>
                </div>
            </div>
            <div class="col-12 mb-3" id="total-frames"></div>
        </div>

        <div id="enemy-select-vue" class="row psostats-content">
            <div class="col-12">
                <h3>Enemies</h3>
            </div>
            <div class="col-12 mb-1">
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="frozenCheckbox" v-model="frozenChecked">
                    <label class="form-check-label" for="frozenCheckbox">Frozen</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="paralyzedCheckbox" v-model="paralyzedChecked">
                    <label class="form-check-label" for="paralyzedCheckbox">Paralyzed</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="maxDamageCheckbox" v-model="maxDamageChecked">
                    <label class="form-check-label" for="maxDamageCheckbox">Max Damage</label>
                </div>
            </div>
            <div class="col-12 mb-1">
                <button id="native-btn" type="button" class="btn native-btn" @click="addNative">Native</button>
                <button id="abeast-btn" type="button" class="btn abeast-btn" @click="addABeast">A.Beast</button>
                <button id="machine-btn" type="button" class="btn machine-btn" @click="addMachine">Machine</button>
                <button id="dark-btn" type="button" class="btn dark-btn" @click="addDark">Dark</button>
                <button id="clear-btn" type="button" class="btn clear-btn" @click="clearEnemies">Clear</button>
            </div>
            <div class="col-12 mb-3">
                <div>
                    <multiselect
                            v-model="defaultEnemies"
                            :options="enemiesByLocation"
                            :multiple="true"
                            group-values="enemies"
                            group-label="name"
                            :group-select="true"
                            track-by="name"
                            label="name"
                            @input="enemiesSelected"
                            :close-on-select="false"
                            :clear-on-select="false"
                            placeholder="Select Enemies"
                            :show-labels="false"
                            :internal-search="false"
                            @search-change="filterEnemies"
                    >
                    </multiselect>
                </div>
            </div>
        </div>
        <div class="row" style="overflow-x: auto;">
            <table class="table table-dark table-bordered table-responsive-md" id="combo-calc-table">
                <thead>
                <tr>
                    <th scope="col" class="sortable" id="monsters-header" colspan="2"><div style="width: 175px">Monster</div></th>
                    <th scope="col" class="sortable" id="damage-header" >Damage</th>
                    <th scope="col" class="sortable" id="accuracy-header" >Accuracy</th>
                    <th scope="col" ><div style="width: 88px; ">Attack 1</div></th>
                    <th scope="col" ><div style="width: 88px; ">Attack 2</div></th>
                    <th scope="col" ><div style="width: 88px; ">Attack 3</div></th>
                </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
    <script>
        $(document).ready(function() {
            updateTotalFrames();
        });
        const weapons = {{ .WeaponsJson }};
        const frames = {{ .FramesJson }};
        const classStats = {{ .ClassStatsJson }};
        let selectedWeapon = weapons["Unarmed"];
        let selectedEnemies = [];
        const enemyNameSort = {{ .EnemyNameSort }};
        const enemies = {{ .EnemiesJson }};
        const allEnemiesByLocation = {};
        for (let location in enemyNameSort) {
            allEnemiesByLocation[location] = [];
            for (let enemyName of enemyNameSort[location]) {
                allEnemiesByLocation[location].push(enemies[enemyName]);
            }
        }
        const locationsInPsoOrder = ["Forest", "Caves", "Mines", "Ruins", "Temple", "Spaceship", "CCA", "Seabed", "Tower", "Crater", "Desert"];

        $('#class-select').change(function() {
            updateAtpInput();
            updateAtaInput();
            updateDamageTable();
            updateTotalFrames();
        })
        $('#frame-select').change(function() {
            updateMinAtpInput();
            updateMaxAtpInput();
            updateAtaInput();
            updateDamageTable();
        });
        $('#barrier-select').change(() => {
            updateMinAtpInput();
            updateMaxAtpInput();
            updateAtaInput();
            updateDamageTable();
        });
        $('#unit-select').change(() => {
            updateMinAtpInput();
            updateMaxAtpInput();
            updateAtaInput();
            updateDamageTable();
        });
        $('#attack1').change(() => {
            updateTotalFrames();
            updateDamageTable();
        })
        $('#attack2').change(() => {
            updateTotalFrames();
            updateDamageTable();
        })
        $('#attack3').change(() => {
            updateTotalFrames();
            updateDamageTable();
        })
        $('#hitInput').change(() => {
            updateAtaInput();
            updateDamageTable();
        })
        $('#commanderBlade').change(() => {
            updateAtaInput();
            updateDamageTable();
        })
        $('#smartlinkInput').change(updateDamageTable);
        $('#special-select').change(updateDamageTable);
        $('#sphereInput').change(updateDamageTable);
        $('#minAtpInput').change(updateDamageTable);
        $('#maxAtpInput').change(updateDamageTable);
        $('#classMinAtpInput').change(updateDamageTable)
        $('#classMaxAtpInput').change(updateDamageTable)
        $('#ataInput').change(updateDamageTable)
        $('#hits1').change(updateDamageTable)
        $('#hits2').change(updateDamageTable)
        $('#hits3').change(updateDamageTable)
        $('#shiftaInput').change(updateDamageTable);
        $('#zalureInput').change(updateDamageTable);
        $('#ataGlitch').change(updateDamageTable);
        $('#autoCombo').change(() => {
            let autoCombo = $('#autoCombo').is(":checked")
            $('#attack1').prop("disabled", autoCombo);
            $('#attack2').prop("disabled", autoCombo);
            $('#attack3').prop("disabled", autoCombo);
            updateDamageTable();
        });
        $('#frozenCheckbox').change(updateDamageTable);

        function updateAtpInput() {
            const selectedClass = $('#class-select').val()
            $('#classMinAtpInput').val(classStats[selectedClass].minAtp)
            $('#classMaxAtpInput').val(classStats[selectedClass].maxAtp)
            $('#ataInput').val(classStats[selectedClass].ata)
        }
        function updateAtaInput() {
            const selectedClass = classStats[$('#class-select').val()];
            const selectedFrame = $('#frame-select').val();
            const selectedBarrier = $('#barrier-select').val();
            const selectedUnit = $('#unit-select').val()
            const bonusAta = getSetEffectAta(selectedWeapon, selectedFrame, selectedBarrier, selectedUnit)
            const commanderBladeAta = $('#commanderBlade').is(":checked") ? 20 : 0;

            $('#ataInput').val(
                selectedClass.ata +
                selectedWeapon.ata +
                frames[selectedFrame].ata +
                barriers[selectedBarrier].ata +
                bonusAta +
                Number($('#hitInput').val()) +
                commanderBladeAta)
        }

        function updateMinAtpInput() {
            const selectedFrame = $('#frame-select').val();
            const selectedBarrier = $('#barrier-select').val();
            const bonusAtp = getSetEffectAtp(selectedWeapon, selectedFrame, selectedBarrier)
            $('#minAtpInput').val(
                selectedWeapon.minAtp +
                (2 * selectedWeapon.grind) +
                frames[selectedFrame].atp +
                barriers[selectedBarrier].atp +
                bonusAtp
            );
        }

        function updateMaxAtpInput() {
            const selectedFrame = $('#frame-select').val();
            const selectedBarrier = $('#barrier-select').val();
            const bonusAtp = getSetEffectAtp(selectedWeapon, selectedFrame, selectedBarrier)
            $('#maxAtpInput').val(selectedWeapon.maxAtp + (2 * selectedWeapon.grind) + frames[selectedFrame].atp + barriers[selectedBarrier].atp + bonusAtp)
        }

        $('#monsters-header').click(() => {
            pushSort("name");
            if (sortAscending === null) {
                $('#monsters-header div').text("Monster")
            } else if (sortAscending) {
                $('#monsters-header div').text("Monster ▲")
            } else {
                $('#monsters-header div').text("Monster ▼")
            }
            $('#damage-header').text("Damage")
            $('#accuracy-header').text("Accuracy")
        });
        $('#damage-header').click(() => {
            pushSort("damage");
            if (sortAscending === null) {
                $('#damage-header').text("Damage")
            } else if (sortAscending) {
                $('#damage-header').text("Damage ▲")
            } else {
                $('#damage-header').text("Damage ▼")
            }
            $('#monsters-header div').text("Monster")
            $('#accuracy-header').text("Accuracy")
        });
        $('#accuracy-header').click(() => {
            pushSort("accuracy");
            if (sortAscending === null) {
                $('#accuracy-header').text("Accuracy")
            } else if (sortAscending) {
                $('#accuracy-header').text("Accuracy ▲")
            } else {
                $('#accuracy-header').text("Accuracy ▼")
            }
            $('#monsters-header div').text("Monster")
            $('#damage-header').text("Damage")
        });
        new Vue({
            components: {
                Multiselect: window.VueMultiselect.default
            },
            data: {
                value: { name: "Unarmed", display: "Unarmed" },
                weapons: [
                    {{ range .Weapons }}{ name: "{{.Name}}", display: "{{.Name}}{{if (gt .Grind 0)}} +{{ .Grind }}{{end}}" },{{ end }}
                ],
            },
            methods: {
                weaponSelected (newSelection) {
                    selectedWeapon = weapons[newSelection.name]
                    updateMinAtpInput();
                    updateMaxAtpInput();
                    if (selectedWeapon.maxHit === undefined) {
                        $('#hitInput').val(100)
                    } else {
                        $('#hitInput').val(selectedWeapon.maxHit)
                    }
                    if (selectedWeapon.maxAttr === undefined) {
                        $('#sphereInput').val(100)
                    } else {
                        $('#sphereInput').val(selectedWeapon.maxAttr)
                    }

                    if (selectedWeapon.special === undefined) {
                        $('#special-select').val("Charge")
                    } else {
                        $('#special-select').val(selectedWeapon.special)
                    }
                    const combo = selectedWeapon.comboPreset
                    if (!!combo && !!combo.attack1Hits) {
                        $('#hits1').val(combo.attack1Hits)
                    } else {
                        $('#hits1').val(1)
                    }
                    if (!!combo && !!combo.attack1) {
                        $('#attack1').val(combo.attack1)
                    }
                    if (!!combo && !!combo.attack2Hits) {
                        $('#hits2').val(combo.attack2Hits)
                    } else {
                        $('#hits2').val(1)
                    }
                    if (!!combo && !!combo.attack2) {
                        $('#attack2').val(combo.attack2)
                    }
                    if (!!combo && !!combo.attack3Hits) {
                        $('#hits3').val(combo.attack3Hits)
                    } else {
                        $('#hits3').val(1)
                    }
                    if (!!combo && !!combo.attack3) {
                        $('#attack3').val(combo.attack3)
                    }
                    updateTotalFrames();
                    updateAtaInput();
                    updateDamageTable();
                },
            }
        }).$mount('#app')

        new Vue({
            components: {
                Multiselect: window.VueMultiselect.default
            },
            data: {
                defaultEnemies: [],
                enemiesByLocation: [
                    { name: "Forest", enemies: allEnemiesByLocation["Forest"]},
                    { name: "Cave", enemies: allEnemiesByLocation["Caves"]},
                    { name: "Mine", enemies: allEnemiesByLocation["Mines"]},
                    { name: "Ruins", enemies: allEnemiesByLocation["Ruins"]},
                    { name: "Temple", enemies: allEnemiesByLocation["Temple"]},
                    { name: "Spaceship", enemies: allEnemiesByLocation["Spaceship"]},
                    { name: "CCA", enemies: allEnemiesByLocation["CCA"]},
                    { name: "Seabed", enemies: allEnemiesByLocation["Seabed"]},
                    { name: "Tower", enemies: allEnemiesByLocation["Tower"]},
                    { name: "Crater", enemies: allEnemiesByLocation["Crater"]},
                    { name: "Desert", enemies: allEnemiesByLocation["Desert"]},
                ],
                frozenChecked: false,
                paralyzedChecked: false,
                maxDamageChecked: false,
            },
            watch: {
                frozenChecked: updateDamageTable,
                paralyzedChecked: updateDamageTable,
                maxDamageChecked: updateDamageTable,
            },
            methods: {
                enemiesSelected (selection) {
                    selectedEnemies = this.defaultEnemies;
                    updateDamageTable();
                },
                addNative() { this.addEnemiesByType("Native") },
                addABeast() { this.addEnemiesByType("A.Beast") },
                addMachine() { this.addEnemiesByType("Machine") },
                addDark() { this.addEnemiesByType("Dark") },
                addEnemiesByType (type) {
                    for (let enemyName in enemies) {
                        let enemy = enemies[enemyName];
                        if (enemy.type === type && !this.defaultEnemies.includes(enemy)) {
                            this.defaultEnemies.push(enemy);
                        }
                    }
                    selectedEnemies = this.defaultEnemies;
                    updateDamageTable();
                },
                clearEnemies() {
                    this.defaultEnemies = [];
                    selectedEnemies = [];
                    updateDamageTable();
                },
                filterEnemies(query) {
                    if (query) {
                        query = query.replaceAll(".", "").toLocaleLowerCase();
                    }
                    this.enemiesByLocation = []
                    for (let location of locationsInPsoOrder) {
                        let enemiesForLocation = [];
                        for (let enemy of allEnemiesByLocation[location]) {
                            if (!query
                                || enemy.name.toLocaleLowerCase().includes(query)
                                || enemy.location.toLocaleLowerCase() === query
                                || enemy.type.replaceAll(".", "").toLocaleLowerCase() === query
                            ) {
                                enemiesForLocation.push(enemy);
                            }
                        }
                        console.log(query, location, enemiesForLocation.length);
                        this.enemiesByLocation.push({"name": location, "enemies": enemiesForLocation});
                    }
                },
            }
        }).$mount('#enemy-select-vue')
    </script>
    </body>

    </html>
{{ end }}
